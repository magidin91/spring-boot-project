1.Spring Boot Security: добавляем панель администратора и роли пользователей, ограничиваем доступ

2. Таблица в html:
<table>
<thead>
<tr>

<th>Name</th>
<th>Role</th>
<th></th>

</tr>
</thead>
</table>

- <thead> предназначен для хранения одной или нескольких строк, которые представлены вверху таблицы.
Допустимо использовать не более одного элемента <thead> в пределах одной таблицы, и он должен идти в исходном коде сразу после тега <table>.
- <tr> служит контейнером для создания строки таблицы.
- <td> предназначен для создания одной ячейки таблицы.
- <th> предназначен для создания одной ячейки таблицы, которая обозначается как заголовочная. Текст в такой ячейке
отображается браузером обычно жирным шрифтом и выравнивается по центру.
Тег <th> должен размещаться внутри контейнера <tr>, который в свою очередь располагается внутри тега <table>
- <tbody> предназначен для хранения одной или нескольких строк таблицы. Это позволяет создавать структурные блоки,
к которым можно применять единое оформление через стили, а также управлять их видом через скрипты.
Допускается применять несколько тегов <tbody> внутри контейнера <table>.
Доступны и другие виды группировок строк — <tfoot> и <thead>, ни один из них не должен перекрываться с элементом <tbody>.

3.
 @GetMapping("{user}")
    public String userEditForm(@PathVariable User user, Model model) {
        model.addAttribute("user", user);
        return "userEdit";
    }
@PathVariable User user - спринг автоматически мапит юзера по полученному айди "{user}".
4.  ${user.roles?seq_contains(role)?string("checked", "")} показывает галкой, выбрана ли роль уже (checked - значит чекбокс выбран)
проверяет содержит ли сет user.roles конкретную роль и в случае тру выставляет галку.

5.  Вывод чекбокса для списка значений
<#list roles as role>
               <div>
                   <#-- Сделали чекбокс для выбора ролей юзера-->
                   <#-- ${user.roles?seq_contains(role)?string("checked", "")} - показывает галкой, выбрана ли роль уже -->
                   <label><input type="checkbox" name="${role}" ${user.roles?seq_contains(role)?string("checked", "")}>${role}</label>
               </div>
           </#list>

6. Разграничение доступа для юзеров.
1. У нашего  User implements UserDetails должен быть метод getAuthorities() для получения Collection<? extends GrantedAuthority>.
2. Накидываем @PreAuthorize("hasAuthority('ADMIN')") на нужные методы или целые контроллеры. ADMIN - это GrantedAuthority, которая
должна быть у пользователя, чтобы он смог использовать метод.
(будет проверять при вызове любого из методов контроллера наличие прав ('ADMIN'))
3. Для работы  PreAuthorize доабвили @EnableGlobalMethodSecurity(prePostEnabled = true) в
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {}