Spring Boot FlyWay: миграции БД, профиль пользователя

Spring Boot Web Application (MVC): готовим приложение к деплою, наводим порядок: фиксируем структуру БД
и переходим на версионирование БД с использованием flyway. Дополнительно добавляем в БД дефолтного администратора
и добавляем страницу профиля пользователя, где каждый пользователь может поменять свой пароль или email.

Миграции нужны для версионирования изменений БД в соответствии со структурой доменной модели.
Проще говоря: при запуске проекта из репозитория с нуля на любом этапе, мы получим нужную структуру БД,
со всеми таблицами и полями, которые нужны для работы приложения + все необходимые данные, вроде дефолтного администратора.

1. JPA имеет функции для генерации DDL, и они могут быть настроены для запуска при запуске с базой данных.
Это контролируется двумя внешними свойствами в application.properties.
https://docs.spring.io/spring-boot/docs/1.5.x/reference/html/howto-database-initialization.html

spring.jpa.generate-ddl (boolean) включает и выключает ddl, т.е. созданеи структуры
spring.jpa.hibernate.ddl-auto (enum) функция управляет созданием DDL

spring.jpa.generate-ddl=false
spring.jpa.show-sql=false - просто показывает в логах сами sql-запросы

spring.jpa.hibernate.ddl-auto -  режим, в кот-м хибер генерирует бд
- spring.jpa.hibernate.ddl-auto=validate - вместо создания или обновления БД хибер будет просто проверять корректность
структуры БД, в случае если будут расхождения приложение не запустится и будут выведены соответствующие ошибки.
- spring.jpa.hibernate.ddl-auto.create - при старте бд будет удалена и создана новая:

Hibernate: alter table if exists message drop constraint if exists FK70bv6o4exfe3fbrho7nuotopf
Hibernate: alter table if exists user_role drop constraint if exists FKfpm8swft53ulq2hl11yplpr5
Hibernate: drop table if exists message cascade
Hibernate: drop table if exists user_role cascade
Hibernate: drop table if exists usr cascade
Hibernate: drop sequence if exists hibernate_sequence
Hibernate: create sequence hibernate_sequence start 1 increment 1
Hibernate: create table message (id int4 not null, filename varchar(255), tag varchar(255), text varchar(255), user_id int8, primary key (id))
Hibernate: create table user_role (user_id int8 not null, roles varchar(255))
Hibernate: create table usr (id int8 not null, activation_code varchar(255), active boolean not null, email varchar(255), password varchar(255), username varchar(255), primary key (id))
Hibernate: alter table if exists message add constraint FK70bv6o4exfe3fbrho7nuotopf foreign key (user_id) references usr
Hibernate: alter table if exists user_role add constraint FKfpm8swft53ulq2hl11yplpr5 foreign key (user_id) references usr



2. В этом задании мы не будем создавать структуру БД с помощью JPA, а будем использовать Flyway.
Добавляем зависимость Flyway:

<dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
</dependency>

В плагины
 <!-- flyway миграция -->
            <plugin>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-maven-plugin</artifactId>
                <version>5.1.4</version>
            </plugin>
            <!-- flyway миграция -->

+ Отключаем создание структуры бд с помощью JPA:

spring.jpa.generate-ddl=false
spring.jpa.hibernate.ddl-auto=validate - хибер только проверяет структуру бд.

3. Файл для миграции создаем в папке resources\db.migration\
Название файла миграции начинается с большой V далее цифра миграции и двойное подчеркивание.  V1__Init_DB.sql

4. INT(4):
INT(n) в MySQL — Значение n в скобках влияет только на длину вывода. Причём только в случае, если задан аттрибут zerofill.

На длину или размерность поля n никак не влияет.

Примеры:

при INT(4) ZEROFILL 4 извлекается как 0004.
при INT(4) ZEROFILL 40001004 извлекается как 40001004.
при INT(4) величина 4 извлекается как 4.
при INT(4) величина 40001004 извлекается как 40001004.
Поля mysql, объявленные как int(1) int(3) int(10) int(12) — занимают одинаковое количество байт. 4 байта.
Поэтому нет смысла играться с этой цифрой. Лучше использовать другой тип поля, например tinyint.

5. alter table if exists message add constraint message_user_fk foreign key (user_id) references usr;
Изменить таблицу message, если существует, добавить ограничение message_user_fk внешнйи ключ=user_id ссылается
на первчиный ключ таблицы usr.

6. <form method="post"> - путь для запроса будет тот же, с которого пришла форма.
7. <input type="email" name="email" class="form-control" placeholder="some@some.com" value="${email!''}"/>
value="${email!''}" - в случае, если емейл не указан (налл), выводим пустую строку.


