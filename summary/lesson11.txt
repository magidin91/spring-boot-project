Bean validation, шифрование паролей

Готовим приложение к деплою, наводим порядок: добавляем шифрование паролей и проверку (валидацию) данных, приходящих на сервер.

-1. Постгрес через терминал
Запускаем консоль постгреса с выбором юзера: psql --username=имя пользователя
Вводим пароль
коннект к базе \c sweater. (выход \q)
Посмотреть записи Select username from usr;

0. flyway  в файл пропертей добавьте spring.flyway.enabled=false(после миграции отключит проверку checkSum)

1. Мы используем не шифрование, а хеширование. Хеширование - шифрование в одну сторону.
https://zen.yandex.ru/media/it_news/heshirovanie-ili-shifrovanie-kak-saity-hraniat-paroli-5d5fc1530ce57b00aeb713cf?utm_source=serp

- Первым шагом добавим шифрование паролей: в классе WebSecurityConfig добавим инициацию бина PasswordEncoder классом BCryptPasswordEncoder.
И сразу же подставим его в authenticationBuilder. Далее добавим хеширование пароля нового пользователя при его регистрации в UserService.

BCryptPasswordEncoder:
https://askdev.ru/q/kak-bcrypt-mozhet-imet-vstroennye-soli-2172/

Хешированный пароль хранится в базе данных,  bcrypt "хэш" может выглядеть примерно так:

$2a$10 $ vI8aWBnW3fID.ZQ4 / zo1G.q1lRps.9cGLcZEiGDMVr5yUP1KUOYTa

на самом деле это три поля, разделенные"$":

2a определяет bcrypt версия алгоритма, которая была использована.
10 - коэффициент затрат ; 2 в 10 степени  итераций функции вывода ключа
vI8aWBnW3fID.ZQ4/zo1G.q1lRps.9cGLcZEiGDMVr5yUP1KUOYTa - это соль и шифрованный текст,
Объединенный и закодированный в модифицированной базе-64. Первые 22 символа (до черты) декодируются до 16-байтового значения для соли.
Остальные символы-это зашифрованный текст, который необходимо сравнить для проверки подлинности.

Т.е. а хешированном пароле хранится версия алгоритма хеширвоания, соль и само хеширвоаннное значение.
BCryptPasswordEncoder знает разные алгоритмы хеширования, нужный алгоритм он узнает из хеша.

Создал класс, в котором создается бин PassWordEncoder().
Чтобы бин был создан, в класс конфигурации спринг секьюрити добавил импорт класса, в котором создается бин - @Import(BeanConfig.class).
Или можно создавать бин в самом классе конфигурации спринг секьюрити.

@Bean
public PasswordEncoder getPassWordEncoder() { return new BCryptPasswordEncoder(8);}
8 - характеризует надежность ключа шифрования.

2. Добавили миграцию, чтобы захешировать уже существующие пароли
https://postgrespro.ru/docs/postgrespro/9.6/pgcrypto

/* расширение постгреса хеширвоания */
create extension if not exists pgcrypto;

/* хешируем уже добавленные пароли, gen_salt - генерир-ть соль, 'bf' - алгоритм шифрования, 8 - сложность */
update usr set password = crypt(password, gen_salt('bf', 8));

(соль содержится в хешированной строке, как и алгоритм хеширвоания)

Миграции запускаются при старте, отработавшие миграции не запускаются повторно, эта инф-ия есть в таблице в бд, также успешность,
хеш сумма итд.

3. Следующим шагом добавим валидацию входящих данных с помощью механизма Bean Validation.
<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
            <version>2.4.2</version>
</dependency>

Для этого на поля доменных классов добавим аннотации @Length, @NotBlank и пр. с указанием ограничений и сообщений,
которые будут отображаться при ошибках валидации.

- После этого немного модифицируем Контроллеры: добавим к получаемым от пользователя данным аннотацию @Valid и
2 обязательных аргумента: BindingResult и Model, которые должны идти в порядке, приведенном в данном тексте.
Первый из них содержит сообщения валидации, а второй служит для передачи данных из контроллера во view.

- Последним шагом остаётся только вывести сообщения об ошибках валидации во view.
Для оформления сообщений используем стили из CSS фреймворка Bootstrap.

- Bean validation - аннотации в спринге для валидирвоания вводимых полей. (накидываем на поля бинов)
Находятся в пакете javax.validation.constraints

Аннотации валидации проверяют любую установку значения в поле, помеченное аннотацией валидации,
т.е. если поле @NotBlank, а мы устанавливаем null, то получим исключение javax.validation.ConstraintViolationException.

@NotBlank(message = "Please fill the message") - поле не должно быть пустым или налл, в другом случае выводим сообщение.

@Length(max = 2048, message = "Too long") - макс длина поля, в другом случае выводим сообщение.

@Email(message = "Email is not correct")
The string has to be a well-formed email address.
Exact semantics of what makes up a valid email address are left to Jakarta Bean Validation providers. Accepts {@code CharSequence}.
null elements are considered valid.

Чтобы получить валидацию полей наших форм, нужно получать соответствующие модели в контроллерах,
поэтому заменяем отдельные параметры в методах на модели:  message, user.

Заменяем @RequestParam String text,@RequestParam String tag на сам @Valid Message message.
@Valid - запускает валидацию.

public String add(@AuthenticationPrincipal User user,
                      @Valid Message message,
                      /* Список аргументов и сообщений ошибок валидаций */
                      BindingResult bindingResult,
                      Model model,
                      @RequestParam("file") MultipartFile file) throws IOException {}

BindingResult bindingResult должен всега идти перед  Model model, иначе ошибки валидации будут сыпаться на фронт без обработки.

- Получаем ошибки и добавляем их в модель model.mergeAttributes(errorMap); // добавляет все атрибуты из мапы в модель.

- Чтобы вывести результаты валидации в шаблон:
Добавляем элемент вывода валидации + добавляем к классу поля ввода 'is-invalid', чтобы выводились невалидные поля.

Если есть ошибки валидации (подсвечивает красным) и выводим под полем ввода:
<div class="invalid-feedback">
Please choose a username.
</div>

Если хотим подсвечивать валидные поля (+ добавляем к классу поля ввода 'is-valid'):
<div class="valid-feedback">
Looks good!
</div>

Поле ввода формы будет выглядеть следующим образом:

<input type="text" class="form-control ${(textError??)?string('is-invalid', '')}"
value="<#if message??>${message.text}</#if>" name="text" placeholder="Введите сообщение" />

<#if textError??>
      <div class="invalid-feedback">
      ${textError}
      </div>
</#if>
</div>

Чтобы в поле ввода было выведено сообщение обо ошибке из блока #if, нужно к классу поля ввода добавить is-invalid,
соответственно будет выведен элемент с классом "invalid-feedback" под полем ввода:

${(textError??)?string('is-invalid', '')} - это выражение означает вставку переменной, приведенной к строке
если textError?? возвращает тру, то возвращаем строку 'is-invalid'. (т.е. добавляем класс только, когда нужно)

4. <#-- мы можем получить данные спринг секьюрити в шаблоне
Сессия юзера и последнее искл-ие -->
#if Session?? && Session.SPRING_SECURITY_LAST_EXCEPTION??>
        <div class="alert alert-danger" role="alert">
            ${Session.SPRING_SECURITY_LAST_EXCEPTION.message}
        </div>
</#if>





